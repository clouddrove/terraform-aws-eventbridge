---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#


#  Name of this project
name: Terraform AWS eventbridge

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-eventbridge

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/clouddrove//terraform-aws-eventbridge.svg"
    url: "https://github.com/clouddrove//terraform-aws-eventbridge/releases/latest"
  - name: "tfsec"
    image: "https://github.com/clouddrove//terraform-aws-eventbridge/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove//terraform-aws-eventbridge/actions/workflows/tfsec.yml"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"
  - name: "Changelog"
    image: "https://img.shields.io/badge/Changelog-blue"
    url: "CHANGELOG.md"

prerequesties:
  - name: Terraform
    url: https://learn.hashicorp.com/terraform/getting-started/install.html
    version: ">= 1.6.6"

providers:
  - name: aws
    url: https://aws.amazon.com/
    version: ">= 5.31.0"

module_dependencies:
  - name: Labels Module
    url: https://github.com/clouddrove/terraform-aws-labels
    description: Provides resource tagging.

#  description of this project
# yamllint disable rule:line-length

description: |-
  Terraform module is used to create eventbridge resource on AWS for network connectivity..

# How to use this project
# yamllint disable rule:line-length
usage: |-
  ### event_bus_archive
  Here is an example of how you can use this module in your inventory structure:
    ```hcl
      module "eventbridge_archive" {

        create_bus      = true
        create_archives = true

        name        = "bus"
        environment = "test"
        label_order = ["name", "environment"]


        archives = {
        "launch-archive-existing-bus" = {
        description    = "launch-archive",
        retention_days = 1
        event_pattern = jsonencode(
        {
       "source" : ["aws.autoscaling"],
       "detail-type" : ["EC2 Instance Launch Successful"]
       }
        )
        }
        }

      }
    ```

  ### event_rule_target
  ```hcl
     module "eventbridge" {

        name        = "subnets"
        environment = "test"
        label_order = ["name", "environment"]

        rules = {
        orders = {
        description   = "Capture all order data"
        event_pattern = jsonencode({ "source" : ["myapp.orders"] })
        enabled       = true
        role_arn      = module.iam-role.arn
        }
        emails = {
        description   = "Capture all emails data"
        event_pattern = jsonencode({ "source" : ["myapp.emails"] })
        enabled       = true
        }
        }
        targets = {
        orders = [
        {
        name            = "send-orders-to-sqs-wth-dead-letter"
        arn             = aws_sqs_queue.queue.arn
        dead_letter_arn = aws_sqs_queue.dlq.arn
        },
        {
        name = "send-orders-to-sqs"
        arn  = aws_sqs_queue.queue.arn
        }
        ]
        emails = [
        {
        name            = "send-orders-to-kinesis"
        dead_letter_arn = aws_sqs_queue.dlq.arn
        arn             = aws_sqs_queue.dlq.arn

         }
          ]
        }
      }
  ```
